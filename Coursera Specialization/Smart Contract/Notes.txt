Smart Contract
--
Link => https://www.coursera.org/learn/smarter-contracts


Week One
--

Smart Contract is the computation element of the blockchain technology

Linux Foundation Hyperledger's Blockchain has a smart contract feature called Chaincode written in Go Language and executed
in Docker Environment

Smart contract addresses the need for application specific validation for blockchain validations
Smart contract
  .Allows specification of rules for an operation on blockchain
  .Implements policies for transfer of assets in a decentralized network
  .Adds programmability and intelligence to the blockchain
  .Represents buisness logic layer
 
Smart contract messages and parameter are specified in a transaction

In bitcoin blockchain, all the transaction are related to transferring of values (money, currency)
In smart contract, a transaction could embedd a function implemented by a smart contract for example VotingSmartContract will
include functions like validateVoter, vote, declareWinner, etc

URLs To Study
  1) https://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart_contracts_2.html
  2) https://docs.soliditylang.org/en/develop/structure-of-a-contract.html
  3) https://docs.soliditylang.org/en/develop/introduction-to-smart-contracts.html
  
  
  
Smart contract is an immutable piece of code deployed on blockchain that cannot be changed
We need to redeploy it in order to change anything in the code

RemixIDE is a good tool to write smart contract code, deploy and execute it

Various Artificats are generated when the contract code is compiled
  .Bytecode for deploying the contract (for instantiating code on EVM)
  .Application Binary Interface (ABI) for the application that smart contract interacts with
  .Gas Estimates
  .Function Hashes
These are all generated by the RemixIDE when compile our code

URLs To Study
  1) https://ethereum.org/en/developers/docs/accounts/
  2) https://k3no.medium.com/ethereum-tokens-smart-contracts-80f639f5c46b
  


Smart Contract deployment includes
  .Code is written in high level language and compiled to bytecode
  .An ABI is also generated for high level language application like WebApp
  .EVM provides execution environment for smart contract bytecode
  .Smart Contract address is generated by hashing the sender account's address and his nonce
  .The payload of the transaction contains the bytecode for the smart contract and the code is executed as a part of the 
   transaction
   
   
   
   
Week Two
--

Solidity is a combination of Java, JavaScript and C++ specially designed to write smart contract and to target ethereum
virtual machine

Structure of a Smart contract
  .State variables
  .Functions
     -Constructors
	 -Fallback function, feature like anonymous function
	 -View functions
	 -Pure functions like Math functions. It computes and returns the value.
	 -Public functions
	 -Private functions
	 -Internal functions
	 -External functions
  .User defined types in struct & enums
  .Modifiers
  .Events
  
Contract can be inherited from other smart contracts

URLs To Study 
  1) https://www.youtube.com/watch?v=xWKq86PWG0o
  
The price of a transaction = Price of Gas x Gas

Solidity Data types
  .uint
  .int
  .string
  .bool
Default modifier is public
Getter and setter are automatically provided

URLs To Study
  1) https://docs.soliditylang.org/en/develop/types.html
  2) https://docs.soliditylang.org/en/v0.4.24/frequently-asked-questions.html
  

Solidity data structures include
  .Address
  .Mapppings
  .Message
  

Address hold 20 byte ethereum address. It also containts the account balance in wei. It contains the function transfer() to
transfer the value to a specific address

Mapping is similar to key value pair like a hash table

Message is a complex data type specific to smart contract. Represents a call that can be used to invoke a function of a smart
contract. It contains many attributes like
   msg.sender (address of the sender)
   msg.value (value in wei sent by sender)
   
Examples
  => https://ethereumbuilders.gitbooks.io/guide/content/en/solidity_tutorials.html
  
  
  
  
Week Three
--

Voting Ballot example in which there is a chairperson (creator of a smart contract) registers all voters to vote and announce 
the final winner.

URLs To Study
  1) https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e
  2) https://www.youtube.com/watch?v=L5Au5DY8eL4
  
  
Study about timeunits, modifiers, revert, assert, events and all solidity specific features.



Week Four
--

Blockchain & Smart contract is not the solution for every problem

Blockchain is suitable for these characteristics
  1) Decentralized Problems, participants hold the asset and are not co-located
  2) Peer to Peer transaction without intermediaries
  3) Operate beyond the boundaries of trust among unknown peers
  4) Autonous operations guided by rules and policies
  
URLs To Study
  1) https://lightrains.com/blogs/smart-contract-best-practices-solidity
  2) https://consensys.github.io/smart-contract-best-practices/
  3) https://medium.com/@maurelian/beyond-smart-contract-best-practices-for-ux-and-interoperability-6d94d27c1e0f
  
